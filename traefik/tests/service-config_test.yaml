suite: Service configuration
templates:
  - service.yaml
tests:
  - it: should be a type LoadBalancer by default
    asserts:
      - equal:
          path: spec.type
          value: LoadBalancer
  - it: should be a custom type when specified via values
    set:
      service:
        type: NodePort
    asserts:
      - equal:
          path: spec.type
          value: NodePort
  - it: should have no annotations by default
    asserts:
      - isNull:
          path: metadata.annotations
  - it: should have customized annotations when specified via values
    set:
      service:
        annotations:
          azure-load-balancer-internal: true
    asserts:
      - equal:
          path: metadata.annotations.azure-load-balancer-internal
          value: true
  - it: should have TCP only annotations when specified via values
    set:
      service:
        annotationsTCP:
          dns-hostname: tcp.example.com
      ports:
        udp:
          port: 3000
          expose: true
          exposedPort: 80
          protocol: UDP
    asserts:
      - equal:
          path: metadata.annotations.dns-hostname
          value: tcp.example.com
        documentIndex: 0
      - isNull:
          path: metadata.annotations
        documentIndex: 1
  - it: should have UDP only annotations when specified via values
    set:
      service:
        annotationsUDP:
          dns-hostname: udp.example.com
      ports:
        udp:
          port: 3000
          expose: true
          exposedPort: 80
          protocol: UDP
    asserts:
      - isNull:
          path: metadata.annotations
        documentIndex: 0
      - equal:
          path: metadata.annotations.dns-hostname
          value: udp.example.com
        documentIndex: 1
  - it: should merge protocol specific service annotations when specified via values
    set:
      service:
        annotations:
          azure-load-balancer-internal: true
        annotationsTCP:
          dns-hostname: tcp.example.com
        annotationsUDP:
          dns-hostname: udp.example.com
      ports:
        udp:
          port: 3000
          expose: true
          exposedPort: 80
          protocol: UDP
    asserts:
      - equal:
          path: metadata.annotations
          value:
            azure-load-balancer-internal: true
            dns-hostname: tcp.example.com
        documentIndex: 0
      - equal:
          path: metadata.annotations
          value:
            azure-load-balancer-internal: true
            dns-hostname: udp.example.com
        documentIndex: 1
  - it: should merge protocol specific service annotations with annotationsTCP unspecified when specified via values
    set:
      service:
        annotations:
          azure-load-balancer-internal: true
        annotationsUDP:
          dns-hostname: udp.example.com
      ports:
        udp:
          port: 3000
          expose: true
          exposedPort: 80
          protocol: UDP
    asserts:
      - equal:
          path: metadata.annotations
          value:
            azure-load-balancer-internal: true
        documentIndex: 0
      - equal:
          path: metadata.annotations
          value:
            azure-load-balancer-internal: true
            dns-hostname: udp.example.com
        documentIndex: 1
  - it: should merge protocol specific service annotations with annotationsUDP unspecified when specified via values
    set:
      service:
        annotations:
          azure-load-balancer-internal: true
        annotationsTCP:
          dns-hostname: tcp.example.com
      ports:
        udp:
          port: 3000
          expose: true
          exposedPort: 80
          protocol: UDP
    asserts:
      - equal:
          path: metadata.annotations
          value:
            azure-load-balancer-internal: true
            dns-hostname: tcp.example.com
        documentIndex: 0
      - equal:
          path: metadata.annotations
          value:
            azure-load-balancer-internal: true
        documentIndex: 1
  - it: should have customized labels when specified via values
    set:
      service:
        labels:
          custom-label: custom-value
    asserts:
      - equal:
          path: metadata.labels.custom-label
          value: custom-value
  - it: should have custom spec elements when specified via values
    set:
      service:
        spec:
          externalTrafficPolicy: Cluster
          loadBalancerIP: "1.2.3.4"
          clusterIP: "2.3.4.5"
          loadBalancerSourceRanges:
            - 192.168.0.1/32
            - 172.16.0.0/16
          externalIPs:
            - "1.2.3.4"
    documentIndex: 0
    asserts:
      - equal:
          path: spec.ports[0].name
          value: web
      - equal:
          path: spec.ports[0].protocol
          value: TCP
      - equal:
          path: spec.externalTrafficPolicy
          value: Cluster
      - equal:
          path: spec.loadBalancerIP
          value: "1.2.3.4"
      - equal:
          path: spec.clusterIP
          value: "2.3.4.5"
      - equal:
          path: spec.loadBalancerSourceRanges[0]
          value: 192.168.0.1/32
      - equal:
          path: spec.loadBalancerSourceRanges[1]
          value: 172.16.0.0/16
      - equal:
          path: spec.externalIPs[0]
          value: "1.2.3.4"
  - it: should have custom spec elements when specified via values for UDP ports
    set:
      ports:
        udp:
          port: 3000
          expose: true
          exposedPort: 80
          protocol: UDP
    documentIndex: 1
    asserts:
      - equal:
          path: spec.ports[0].name
          value: udp
      - equal:
          path: spec.ports[0].protocol
          value: UDP
  - it: should not have ipFamilyPolicy when not specified
    set:
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - isEmpty:
          path: spec.ipFamilyPolicy
        documentIndex: 0
      - isEmpty:
          path: spec.ipFamilyPolicy
        documentIndex: 1
  - it: should have custom ipFamilyPolicy when specified via values
    set:
      service:
        ipFamilyPolicy: PreferDualStack
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - equal:
          path: spec.ipFamilyPolicy
          value: PreferDualStack
        documentIndex: 0
      - equal:
          path: spec.ipFamilyPolicy
          value: PreferDualStack
        documentIndex: 1
  - it: should not have ipFamilies when not specified
    set:
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - isEmpty:
          path: spec.ipFamilies
        documentIndex: 0
      - isEmpty:
          path: spec.ipFamilies
        documentIndex: 1
  - it: should have custom ipFamilies when specified via values
    set:
      service:
        ipFamilies:
          - IPv6
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - equal:
          path: spec.ipFamilies
          value:
            - IPv6
          documentIndex: 0
      - equal:
          path: spec.ipFamilies
          value:
            - IPv6
          documentIndex: 1
  - it: should have http3 UDP port when enabled via values
    set:
      ports:
        websecure:
          http3: true
          tls:
            enabled: true
      experimental:
        http3:
          enabled: true
    documentIndex: 1
    asserts:
    - equal:
        path: spec.ports[0].port
        value: 443
    - equal:
        path: spec.ports[0].targetPort
        value: 8443
    - equal:
        path: spec.ports[0].protocol
        value: UDP
      documentIndex: 1
  - it: should fail when there is no exposed port
    set:
      ports:
        web:
          expose: false
        websecure:
          expose: false
    asserts:
    - failedTemplate:
        errorMessage: "You need to expose at least one port or set enabled=false to service"
        documentIndex: 1
  - it: should not be possible to use http3 without enabling experimental http3 feature
    set:
      ports:
        websecure:
          http3: true
    asserts:
      - failedTemplate:
          errorMessage: "You cannot use HTTP3 on an entrypoint without enabling http3 experimental feature"
